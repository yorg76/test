<?xml version="1.0" encoding="UTF-8"?>
<!-- Some custom compilation rules to add or override build-impl.xml. -->
<!-- You may freely change this file. -->
<project name="qz" default="default" basedir=".">
	<description>Builds, tests, and runs the project qz-print.</description>
	<target depends="-init-private, -deps-jar-init,deps-jar,-check-automatic-build,-pre-pre-compile,-compile-depend,-do-compile,compile,compile-single,-do-jar-copylibs,-do-jar-jar,jar.core,signjars,signjarspremium,generate-html-preview,zipFiles,zipPremiumFiles" description="Build JAR." name="default" />
	<property name="helper.file" location="helper.txt" />

	<!-- Custom Code Signing -->
	<target name="-init-private">
		<echo message="Using custom private.properties file via build.xml..." />
		<property file="resources/private/config.properties" />
		<property file="resources/private/configs/${config}.properties" />
		<!-- Your custom code signing properties here. Feel free to change. -->
		<!-- The project will default to qz.ks if it doesn't exist -->
		<property file="${user.home}/java/ca/private.properties" />
		<property file="${user.home}/Desktop/Code Signing/private.properties" />
		<!-- The default code signing properties which uses qz.ks. -->
		<!-- Please leave this value the netbeans default as a fallback. -->
		<property file="resources/private/private.properties" />
		<property file="resources/project.properties" />
	</target>

	<target name="-deps-jar-init" unless="built-jar.properties">
		<property location="${build.dir}/built-jar.properties" name="built-jar.properties" />
		<delete file="${built-jar.properties}" quiet="true" />
	</target>

	<target if="already.built.jar.${basedir}" name="-warn-already-built-jar">
		<echo level="warn" message="Cycle detected: qz-print was already built" />
	</target>
	<target name="deps-jar" unless="no.deps">
		<mkdir dir="${build.dir}" />
		<touch file="${built-jar.properties}" verbose="false" />
		<property file="${built-jar.properties}" prefix="already.built.jar." />
		<antcall target="-warn-already-built-jar" />
		<propertyfile file="${built-jar.properties}">
			<entry key="${basedir}" value="" />
		</propertyfile>
	</target>
	<target name="-verify-automatic-build" />
	<target name="-check-automatic-build">
		<available file="${build.classes.dir}/.netbeans_automatic_build" property="netbeans.automatic.build" />
	</target>
	<target if="netbeans.automatic.build" name="-clean-after-automatic-build">
		<antcall target="clean" />
	</target>
	<target depends="deps-jar" name="-pre-pre-compile">
		<mkdir dir="${build.classes.dir}" />
	</target>
	<target name="-pre-compile">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target if="do.depend.true" name="-compile-depend">
		<pathconvert property="build.generated.subdirs">
			<dirset dir="${build.generated.sources.dir}" erroronmissingdir="false">
				<include name="*" />
			</dirset>
		</pathconvert>
		<depend srcdir="${}:${build.generated.subdirs}" />
	</target>
	<target depends="deps-jar,-pre-pre-compile,-pre-compile, -copy-persistence-xml,-compile-depend" if="have.sources" name="-do-compile">
		<javac gensrcdir="${build.generated.sources.dir}" />
		<copy todir="${build.classes.dir}">
			<fileset dir="${}" excludes="${build.classes.excludes},${excludes}" includes="${includes}" />
		</copy>
	</target>
	<target if="has.persistence.xml" name="-copy-persistence-xml">
		<mkdir dir="${build.classes.dir}/META-INF" />
		<copy todir="${build.classes.dir}/META-INF">
			<fileset dir="${meta.inf.dir}" includes="persistence.xml orm.xml" />
		</copy>
	</target>
	<target name="-post-compile">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target depends="deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" description="Compile project." name="compile" />
	<target name="-pre-compile-single">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target name="copyJnlp">
		<mkdir dir="${build.classes.dir}/JNLP-INF" />
		<copy todir="${build.classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.JNLP" />
			</fileset>
		</copy>
		<copy todir="${build.dir}">
			<fileset dir="${basedir}">
				<include name="*.mf" />
			</fileset>
		</copy>
		<!-- FIXME - Seems to have no effect -->
		<manifest file="${build.dir}/manifest.mf" mode="update">
			<attribute name="Application-Name" value="QZ Print Plugin" />
			<attribute name="Application-Library-Allowable-Codebase" value="${APPLICATION_LIBRARY_ALLOWABLE_CODEBASE}" />
			<attribute name="Caller-Allowable-Codebase" value="*" />
			<attribute name="Codebase" value="*" />
			<attribute name="Permissions" value="all-permissions" />
			<attribute name="Class-Path" value="*" />
		</manifest>
	</target>
	<target depends="deps-jar,-pre-pre-compile,copyJnlp" name="-do-compile-single">

		<javac srcdir="${src.dir}" destdir="${build.classes.dir}">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>
	<target name="-post-compile-single">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target depends="deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single" name="compile-single" />
	<!--
               ====================
               JAR BUILDING SECTION
               ====================
           -->
	<target name="-pre-pre-jar">
		<dirname file="${dist.jar}" property="dist.jar.dir" />
		<mkdir dir="${dist.jar.dir}" />
	</target>
	<target name="-pre-jar">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target if="do.archive" name="-do-jar-create-manifest" unless="manifest.available">
		<tempfile deleteonexit="true" destdir="${build.dir}" property="tmp.manifest.file" />
		<touch file="${tmp.manifest.file}" verbose="false" />
	</target>
	<target if="do.archive+manifest.available" name="-do-jar-copy-manifest">
		<tempfile deleteonexit="true" destdir="${build.dir}" property="tmp.manifest.file" />
		<copy file="${manifest.file}" tofile="${tmp.manifest.file}" />
	</target>
	<target depends="-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+main.class.available" name="-do-jar-set-mainclass">
		<manifest file="${tmp.manifest.file}" mode="update">
			<attribute name="Main-Class" value="${main.class}" />
		</manifest>
	</target>
	<target depends="-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+profile.available" name="-do-jar-set-profile">
		<manifest file="${tmp.manifest.file}" mode="update">
			<attribute name="Profile" value="${javac.profile}" />
		</manifest>
	</target>
	<target depends="-do-jar-create-manifest,-do-jar-copy-manifest" if="do.archive+splashscreen.available" name="-do-jar-set-splashscreen">
		<basename file="${application.splash}" property="splashscreen.basename" />
		<mkdir dir="${build.classes.dir}/META-INF" />
		<copy failonerror="false" file="${application.splash}" todir="${build.classes.dir}/META-INF" />
		<manifest file="${tmp.manifest.file}" mode="update">
			<attribute name="SplashScreen-Image" value="META-INF/${splashscreen.basename}" />
		</manifest>
	</target>
	<target depends="compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen" if="do.mkdist" name="-do-jar-copylibs">
		<copylibs manifest="${tmp.manifest.file}" />
		<echo level="info">To run this application from the command line without Ant, try:</echo>
		<property location="${dist.jar}" name="dist.jar.resolved" />
		<echo level="info">${platform.java} -jar "${dist.jar.resolved}"</echo>
	</target>
	<target depends="compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen" if="do.archive" name="-do-jar-jar" unless="do.mkdist">
		<jar manifest="${tmp.manifest.file}" />
		<property location="${build.classes.dir}" name="build.classes.dir.resolved" />
		<property location="${dist.jar}" name="dist.jar.resolved" />
		<pathconvert property="run.classpath.with.dist.jar">
			<path path="${run.classpath}" />
			<map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}" />
		</pathconvert>
		<condition else="" property="jar.usage.message" value="To run this application from the command line without Ant, try:${line.separator}${platform.java} -cp ${run.classpath.with.dist.jar} ${main.class}">
			<isset property="main.class.available" />
		</condition>
		<condition else="debug" property="jar.usage.level" value="info">
			<isset property="main.class.available" />
		</condition>
		<echo level="${jar.usage.level}" message="${jar.usage.message}" />
	</target>
	<target depends="-do-jar-copylibs" if="do.archive" name="-do-jar-delete-manifest">
		<delete>
			<fileset file="${tmp.manifest.file}" />
		</delete>
	</target>
	<target depends="compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-jar,-do-jar-delete-manifest" name="-do-jar-without-libraries" />
	<target depends="compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-copylibs,-do-jar-delete-manifest" name="-do-jar-with-libraries" />
	<target name="-post-jar">
		<!-- Empty placeholder for easier customization. -->
		<!-- You can override this target in the ../build.xml file. -->
	</target>
	<target depends="compile,-pre-jar,-do-jar-without-libraries,-do-jar-with-libraries,-post-jar" name="-do-jar" />
	<target depends="compile,-pre-jar,-do-jar,-post-jar" description="Build JAR." name="jar" />
	<!--
               =================
               EXECUTION SECTION
               =================
           -->
	<target depends="compile" description="Run a main class." name="run">
		<java>
			<customize>
				<arg line="${application.args}" />
			</customize>
		</java>
	</target>
	<target name="-do-not-recompile">
		<property name="javac.includes.binary" value="" />
	</target>
	<target depends="compile-single" name="run-single">
		<fail unless="run.class">Must select one file in the IDE or set run.class</fail>
		<java classname="${run.class}" />
	</target>

	<target name="jar.core">
		<jar destfile="${dist.jar}">
			<fileset dir="${build.classes.dir}" excludes="${dist.archive.excludes}" />
		</jar>
	</target>

	<target name="check-keystore">
		<available file="${jnlp.signing.keystore}" property="keystore.present" />
	</target>
	<target name="gen-key" depends="check-keystore" if="keystore.present">
		<echo message="${application.vendor}" file="${helper.file}" />
		<loadfile property="application.vendor.filtered" srcfile="${helper.file}">
			<filterchain>
				<deletecharacters chars="," />
			</filterchain>
		</loadfile>
		<delete file="${helper.file}" />
		<property name="jnlp.signjar.vendor" value="CN=${application.vendor.filtered}" />
		<genkey dname="${jnlp.signjar.vendor}" alias="${jnlp.signing.alias}" keystore="${jnlp.signing.keystore}" storepass="${jnlp.signing.storepass}" keypass="${jnlp.signing.keypass}" />
	</target>
	<target name="signjars" unless="jnlp.signing.tsaurl">
		<echo message="Signing Free version" />
		<signjar jar="${dist.jar}" signedjar="${dist.jar}" alias="${jnlp.signing.alias}" storepass="${jnlp.signing.storepass}" keystore="${jnlp.signing.keystore}" keypass="${jnlp.signing.storepass}" />
		<path>
			<fileset dir="dist/lib" includes="*.jar" />
		</path>
	</target>

	<target name="signjarspremium" if="jnlp.signing.tsaurl">
		<echo message="Signing Premium version" />
		<signjar jar="${dist.jar}" signedjar="${dist.jar}" alias="${jnlp.signing.alias}" storepass="${jnlp.signing.storepass}" keystore="${jnlp.signing.keystore}" keypass="${jnlp.signing.storepass}" tsaurl="${jnlp.signing.tsaurl}" />
		<path>
			<fileset dir="dist/lib" includes="*.jar" />
		</path>
	</target>
	<target name="zipFiles" unless="jnlp.signing.tsaurl">
		<zip destfile="manual.zip">
			<zipfileset dir="dist" prefix="dist"/>
			<zipfileset dir=".." includes="*.txt" />
		</zip>
	</target>
	<target name="zipPremiumFiles" if="jnlp.signing.tsaurl">
		<zip destfile="manual.zip">
			<zipfileset dir="dist" prefix="dist"/>
			<zipfileset dir=".." includes="*.txt" />
			<zipfileset dir="${user.home}/java/ca/" includes="*AGREEMENT*.txt" />
		</zip>
	</target>

	<!-- Perform some cleanup and copying at the generate-html-preview stage -->
	<target name="generate-html-preview">
		<echo message="Using custom copy/delete tasks via build.xml..." />
		
		<!-- Copy our "lib" directory -->
		<copy todir="${basedir}/dist/lib">
		   <fileset dir="${basedir}/lib"/>
		</copy>
		
		<!-- We're aren't using JWS, no JNLP file needed -->
		<delete file="${basedir}/dist/jnlpcomponent1.jnlp" failonerror="false" />
		
		<!-- Delete some default NetBeans Applet stuff that's not needed -->
		<delete file="${basedir}/dist/README.TXT" failonerror="false" />

		<!-- Used by netscape.javascript.JSObject, which is part of the -->
		<!-- standard JRE. Required for build but not needed for dist -->
		<delete file="${basedir}/dist/lib/plugin.jar" failonerror="false" />

		<!-- Remove Java WebStart jar -->
                <delete file="${basedir}/dist/lib/javaws.jar" failonerror="false" />

		<!-- Copy some project specific files -->
		<copy file="${basedir}/sample.html" tofile="${basedir}/dist/sample.html" overwrite="true" encoding="UTF-8" />

		<copy file="${basedir}/misc/zpl_sample.txt" tofile="${basedir}/dist/misc/zpl_sample.txt" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/misc/epl_sample.txt" tofile="${basedir}/dist/misc/epl_sample.txt" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/misc/epl_multiples.txt" tofile="${basedir}/dist/misc/epl_multiples.txt" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/misc/fgl_sample.txt" tofile="${basedir}/dist/misc/fgl_sample.txt" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/misc/zpl_sample.xml" tofile="${basedir}/dist/misc/zpl_sample.xml" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/misc/pdf_sample.pdf" tofile="${basedir}/dist/misc/pdf_sample.pdf" overwrite="true" encoding="UTF-8" />

		<copy file="${basedir}/js/jquery-1.10.2.js" tofile="${basedir}/dist/js/jquery-1.10.2.js" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/js/jquery.plugin.html2canvas.js" tofile="${basedir}/dist/js/jquery.plugin.html2canvas.js" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/js/html2canvas.js" tofile="${basedir}/dist/js/html2canvas.js" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/js/PluginDetect.js" tofile="${basedir}/dist/js/PluginDetect.js" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/js/deployJava.js" tofile="${basedir}/dist/js/deployJava.js" overwrite="true" encoding="UTF-8" />

		<copy file="${basedir}/img/image_sample_bw.png" tofile="${basedir}/dist/img/image_sample_bw.png" overwrite="true" encoding="UTF-8" />
		<copy file="${basedir}/img/image_sample.png" tofile="${basedir}/dist/img/image_sample.png" overwrite="true" encoding="UTF-8" />
		
		<!-- Fix newlines for readiblity on Windows -->
		<fixcrlf srcdir="${basedir}/.." includes="**/*.txt" eol="crlf" />
		<fixcrlf srcdir="${user.home}/java/ca/" includes="**/*.txt" eol="crlf" />
		<fixcrlf srcdir="${basedir}/src/JNLP-INF/" includes="**/*.*" eol="crlf" />
		
		<!-- A copy of the Java Web Start file must reside inside the jar as well as next to sample.html -->
		<copy file="${basedir}/src/JNLP-INF/APPLICATION.JNLP" tofile="${basedir}/dist/qz-print_jnlp.jnlp" overwrite="true" encoding="UTF-8" />	
	</target>
</project>
